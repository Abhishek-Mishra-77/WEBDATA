{"version":3,"file":"static/js/597.30624057.chunk.js","mappings":"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","sources":["components/resultGeneration/ResultGeneratorWorker.js"],"sourcesContent":["// resultGeneratorWorker.js\r\n\r\nself.onmessage = (e) => {\r\n  let count = 0;\r\n  const {\r\n    dataHeaders,\r\n    keyHEaders,\r\n    mappedKey,\r\n    subjectWiseMarking,\r\n    ctx,\r\n    headers,\r\n  } = e.data;\r\n  // let headers = [];\r\n  let finalAnswers = [];\r\n\r\n  for (let i = 1; i < dataHeaders.length; i++) {\r\n    //we will go to each student attempted question in data file\r\n    if (i % 15 === 0) {\r\n      self.postMessage({\r\n        type: \"progress\",\r\n        processedData: i,\r\n      });\r\n    }\r\n\r\n    let startpoint = +ctx.paperMarkings.start;\r\n\r\n    let endPoint = +startpoint + +ctx.paperMarkings.end - 1;\r\n\r\n    let CorrectAnswer = 0;\r\n    let WrongAnswer = 0;\r\n    let NotAttempted = 0;\r\n\r\n    let correctPoint = +ctx.paperMarkings.correctPoint;\r\n\r\n    let wrongPoint = +ctx.paperMarkings.wrongPoint;\r\n\r\n    let subjectHEaderPushCount = 1;\r\n    let validMappedKey = false;\r\n    for (let j = 1; j < keyHEaders.length; j++) {\r\n      //we will try to find mapped key in key file so that student attempted paper Question in data file will be  matched with student targeted keys file\r\n      if (dataHeaders[i][mappedKey] == keyHEaders[j][mappedKey]) {\r\n        validMappedKey = true;\r\n        // after getting the mapped answerkey  in keyData file now we will run our logic to find correct and wrong answer calculation\r\n        let currentIndex = 0;\r\n        let AllOutPutHeaders = {};\r\n\r\n        while (currentIndex < keyHEaders[0].length) {\r\n          let currentHeaders = keyHEaders[0][currentIndex];\r\n          AllOutPutHeaders = {\r\n            ...AllOutPutHeaders,\r\n            [currentHeaders]: dataHeaders[i][currentHeaders],\r\n          };\r\n\r\n          currentIndex++;\r\n        }\r\n\r\n        if (subjectWiseMarking.length > 0) {\r\n          // console.log(subjectWiseMarking,\"sbmarking\")\r\n          //here we will run a loop for each subject which we selects during result generation\r\n          let studentData = {};\r\n          let allSubjectTotal = 0;\r\n          for (let k = 0; k < subjectWiseMarking.length; k++) {\r\n      \r\n            if (i == 1 && subjectHEaderPushCount == 1) {\r\n              headers.push(\r\n                `${subjectWiseMarking[k].subject}_notAttempted`,\r\n                `${subjectWiseMarking[k].subject}_Correct`,\r\n                `${subjectWiseMarking[k].subject}_wrongAnswer`,\r\n                `${subjectWiseMarking[k].subject}_total`\r\n              );\r\n            }\r\n\r\n            startpoint = +subjectWiseMarking[k].start;\r\n            endPoint = +subjectWiseMarking[k].end;\r\n            CorrectAnswer = 0;\r\n            WrongAnswer = 0;\r\n            NotAttempted = 0;\r\n\r\n            let subjectTotal = 0;\r\n            while (startpoint <= endPoint) {\r\n              let currentHeaders = keyHEaders[0][startpoint];\r\n\r\n              if (\r\n                dataHeaders[i][currentHeaders] == \"\" ||\r\n                keyHEaders[j][currentHeaders] == \"\"\r\n              ) {\r\n                NotAttempted++;\r\n              } else if (\r\n                keyHEaders[j][currentHeaders] == dataHeaders[i][currentHeaders]\r\n              ) {\r\n                CorrectAnswer++;\r\n              } else if (\r\n                keyHEaders[j][currentHeaders] != dataHeaders[i][currentHeaders]\r\n              ) {\r\n                WrongAnswer++;\r\n              }\r\n\r\n              startpoint++;\r\n            }\r\n            subjectTotal =\r\n              CorrectAnswer * +subjectWiseMarking[k].correctPoint -\r\n              +WrongAnswer * +subjectWiseMarking[k].wrongPoint;\r\n            allSubjectTotal += subjectTotal;\r\n            studentData = {\r\n              ...studentData,\r\n              [`${subjectWiseMarking[k].subject}_notAttempted`]: NotAttempted,\r\n              [`${subjectWiseMarking[k].subject}_Correct`]: CorrectAnswer,\r\n              [`${subjectWiseMarking[k].subject}_wrongAnswer`]: WrongAnswer,\r\n              [`${subjectWiseMarking[k].subject}_total`]: subjectTotal,\r\n              total: allSubjectTotal,\r\n            };\r\n          }\r\n          subjectHEaderPushCount++;\r\n          finalAnswers.push({ ...studentData, ...AllOutPutHeaders });\r\n\r\n          // finalAnswers.push(studentData);\r\n        } else {\r\n          while (startpoint <= endPoint) {\r\n            let currentHeaders = keyHEaders[0][startpoint];\r\n            if (dataHeaders[i][currentHeaders] == \"\") {\r\n              NotAttempted++;\r\n            } else if (\r\n              keyHEaders[j][currentHeaders] == dataHeaders[i][currentHeaders]\r\n            ) {\r\n              CorrectAnswer++;\r\n            } else if (\r\n              keyHEaders[j][currentHeaders] != dataHeaders[i][currentHeaders]\r\n            ) {\r\n              WrongAnswer++;\r\n            } else {\r\n            }\r\n            //     console.log(dataHeaders[0], dataHeaders[i][currentHeaders]);\r\n            startpoint++;\r\n          }\r\n          // return;\r\n          finalAnswers.push({\r\n            ...AllOutPutHeaders,\r\n\r\n            notAttempted: NotAttempted,\r\n            wrongAnswer: WrongAnswer,\r\n            correctAnswer: CorrectAnswer,\r\n            total_Score:\r\n              CorrectAnswer * correctPoint - WrongAnswer * wrongPoint,\r\n            remark: \"ok\",\r\n          });\r\n        }\r\n\r\n        break;\r\n      } else {\r\n      }\r\n    }\r\n    if (!validMappedKey) {\r\n      //if we will not find any student apper key matches with keyHEaders then we will return the currennt student without calculating result but we will add a remark\r\n      const studentObj = {\r\n        ...dataHeaders[i],\r\n        remark: \"mapped key not match\",\r\n      };\r\n      finalAnswers.push(studentObj);\r\n    }\r\n  }\r\n\r\n  self.postMessage({ type: \"result\", headersData: headers, finalAnswers });\r\n};\r\n"],"names":["self","onmessage","e","dataHeaders","keyHEaders","mappedKey","subjectWiseMarking","ctx","headers","data","finalAnswers","i","length","postMessage","type","processedData","startpoint","paperMarkings","start","endPoint","end","CorrectAnswer","WrongAnswer","NotAttempted","correctPoint","wrongPoint","subjectHEaderPushCount","validMappedKey","j","currentIndex","AllOutPutHeaders","currentHeaders","studentData","allSubjectTotal","k","push","concat","subject","subjectTotal","total","notAttempted","wrongAnswer","correctAnswer","total_Score","remark","studentObj","headersData"],"sourceRoot":""}